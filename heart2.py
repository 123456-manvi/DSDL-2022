# -*- coding: utf-8 -*-
"""heart2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1cN0W18YR1z8bBwxm-9g9M1_icWenQ4iW
"""

import numpy as np
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
import math
heart=pd.read_csv("/content/heart.csv")
heart.head(20)

from sklearn.preprocessing import LabelEncoder

lebb=LabelEncoder()

heart.ChestPainType=lebb.fit_transform(heart.ChestPainType)
heart.RestingECG = lebb.fit_transform(heart.RestingECG)
heart.ExerciseAngina = lebb.fit_transform(heart.ExerciseAngina)
heart.ST_Slope = lebb.fit_transform(heart.ST_Slope)
heart.Sex=lebb.fit_transform(heart.Sex)
heart.head()

sns.countplot(x="HeartDisease", data=heart)

heart.HeartDisease.value_counts()

sns.countplot(x="RestingBP",data=heart)
plt.show()

heart["MaxHR"].plot.hist()

heart["Cholesterol"].plot.hist()

sns.countplot(x="RestingBP", data=heart)
plt.show()

sns.countplot(x="ChestPainType", data=heart)
plt.show()

heart.isnull()

heart.isnull().sum()

sns.heatmap(heart.isnull(), yticklabels=False,cmap="viridis")

y = heart.HeartDisease.values
X = heart.drop(['HeartDisease'], axis = 1)
y

"""#Logistic Regression"""

import seaborn as sns
import pandas as pd
import numpy as np

df=sns.load_dataset('iris')
df.head()

df['species'].unique()

df.isnull().sum()

df=df[df['species']!='setosa']

df.head()

df['species']=df['species'].map({'versicolor':0,'virginica':1})

df.head()

X=df.iloc[:,:-1]
y=df.iloc[:,-1]

y

from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(
    X, y, test_size=0.25, random_state=42)

from sklearn.linear_model import LogisticRegression
classifier=LogisticRegression()

from sklearn.model_selection import GridSearchCV
parameter={'penalty':['l1','l2','elasticnet'],'C':[1,2,3,4,5,6,10,20,30,40,50],'max_iter':[100,200,300]}

classifier_regressor=GridSearchCV(classifier,param_grid=parameter,scoring='accuracy',cv=5)

classifier_regressor.fit(X_train,y_train)

print(classifier_regressor.best_params_)

print(classifier_regressor.best_score_)

y_pred=classifier_regressor.predict(X_test)

df.corr()

sns.pairplot(df,hue='species')

from sklearn.metrics import accuracy_score,classification_report

score=accuracy_score(y_pred,y_test)
print(score)

"""#KNN"""

df = pd.read_csv("heart.csv",index_col=0)

df.head()

from sklearn.preprocessing import StandardScaler

scaler = StandardScaler()

from sklearn.model_selection import train_test_split

from sklearn.neighbors import KNeighborsClassifier

knn = KNeighborsClassifier(n_neighbors=1)

knn.fit(X_train,y_train)

pred = knn.predict(X_test)

from sklearn.metrics import classification_report,confusion_matrix
from sklearn.model_selection import cross_val_score

print(confusion_matrix(y_test,pred))

print(classification_report(y_test,pred))

knn = KNeighborsClassifier(n_neighbors=1)

knn.fit(X_train,y_train)
pred = knn.predict(X_test)

print('WITH K=1')
print('\n')
print(confusion_matrix(y_test,pred))
print('\n')
print(classification_report(y_test,pred))

knn = KNeighborsClassifier(n_neighbors=23)

knn.fit(X_train,y_train)
pred = knn.predict(X_test)

print('WITH K=23')
print('\n')
print(confusion_matrix(y_test,pred))
print('\n')
print(classification_report(y_test,pred))

"""#decision tree"""

from sklearn.tree import DecisionTreeClassifier

heart.shape

y = heart[['HeartDisease']].copy()
x = heart.drop(['HeartDisease'], axis = 1)
x.columns

y.columns

from sklearn.model_selection import train_test_split
x_train,x_test,y_train,y_test=train_test_split(x,y,test_size=0.3,random_state=2)

heart_classifier=DecisionTreeClassifier(max_leaf_nodes=10,random_state=0)
heart_classifier.fit(x_train,y_train)

treemodel=DecisionTreeClassifier(max_depth=2)

y_pred

from sklearn.metrics import accuracy_score,classification_report

y_predicted=heart_classifier.predict(x_test)

accuracy_score(y_test,y_predicted)*100

"""#Random forest classifier"""

labels=heart.pop("HeartDisease")

from sklearn.model_selection import train_test_split
x_train,x_test,y_train,y_test=train_test_split(heart,labels,test_size=0.3)

from sklearn.ensemble import RandomForestClassifier
rf = RandomForestClassifier()
rf.fit(x_train,y_train)

y_pred= rf.predict(x_test)

from sklearn.metrics import  roc_curve,auc
false_positive_rate,true_positive_rate,thresholds=roc_curve(y_test,y_pred)
roc_auc=auc(false_positive_rate,true_positive_rate)
roc_auc

